import sys
from pathlib import Path
path = Path(__file__).parent.resolve()
parent = path.parents[0]
[sys.path.append(x) for x in map(str, [path, parent]) if x not in sys.path]

import json
import logging
import logging.config
import pathlib
log_config = (pathlib.Path(__file__).parent.resolve().parents[0].joinpath("log_config.json"))
config = json.load(open(str(log_config)))
logging.config.dictConfig(config)
logger = logging.getLogger(__name__)

from processor import Processor 
from network import packet
import requests

"""
{
					"type": "malware",
					"src_ip": "x.x.x.x",
					"download": "http://localhost:9000/exploit/{id}",
					"attack_id": 13,
					"file_size": 1000,
}
"""
class Malware(Processor):
    FIELDS = ["download", "attack_id", "file_size"]
    
    def __init__(self, cmd):
        super().__init__(cmd)
        self.check_cmd(self.FIELDS)
        logger.info(f"[malware] cmd: {cmd}")

        return


    def run_cmd(self):
        cmd = self.cmd
        link = cmd["download"]
        file_size = cmd["file_size"]
        self.is_infected = True
        result = ''

        try:
            # 암호화되지 않은 url 
            r = requests.get(link, timeout = 10.0)
        except requests.exceptions.ReadTimeout:
            logger.info(f"[malware] download failed - timeout")
            self.is_infected = False
        else:
            result = r.text
        
        if file_size != len(result):
            logger.info(f"[malware] download failed - different fize")
            self.is_infected = False
        else:
            self.is_infected = True
            pass
        
        return


    def report(self, sock = None):
        data = {
            "type": "malware",
            "infected": self.is_infected,
            "attack_id": self.cmd["attack_id"]
        }
        
        logger.info(f"[malware] data: {data}")
        self._report(sock, data)


if __name__ == '__main__':
    msg = {
        "type": "malware",
        "download": "http://localhost:9000/download/1",
        "attack_id": 1,
        "file_size": 4656,
    }

    a = Malware(msg)
    a.run_cmd()
    a.report()
